/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import org.slf4j.LoggerFactory

buildscript {
    def logger = LoggerFactory.getLogger("newrelic")

    ext {
        def hasOptional = { key, defaultValue -> rootProject.hasProperty(key) ? rootProject[key] : defaultValue }

        newrelic = [
                agent: [
                        version : hasOptional('newrelic.agent.version', '7.+'),
                        snapshot: hasOptional('newrelic.agent.snapshot', null),
                        ndk     : hasOptional('newrelic.ndk.version', '1.+')
                ]
        ]
        newrelic.agent.snapshotUri = uri("https://oss.sonatype.org/content/repositories/comnewrelic-${newrelic.agent.snapshot}")
        newrelic.deps = [
                agent : "com.newrelic.agent.android:android-agent:${newrelic.agent.version}",
                plugin: "com.newrelic.agent.android:agent-gradle-plugin:${newrelic.agent.version}",
                ndk   : "com.newrelic.agent.android:agent-ndk:${newrelic.agent.ndk}",
        ]
        versions = [
                gradle  : hasOptional("newrelic.gradle.version", "7.6"),
                agp     : [
                        plugin    : hasOptional('newrelic.agp.version', "7.0.+"),
                        targetSdk : 31,
                        compileSdk: 31,
                        minSdk    : 26,
                        supportLib: "28.+"
                ],
                dexguard: [
                        base  : hasOptional('dexguard.base.version', '9.+'),
                        plugin: hasOptional('dexguard.plugin.version', '9.+')
                ],
                kotlin  : hasOptional('newrelic.kotlin.version', '1.7.+'),
                gson    : '2.10.1',
                bcprov  : '1.76'
        ]
    }

    dependencies {
        classpath newrelic.deps.plugin
        if (project.compiler.startsWith('dexguard')) {
            classpath "com.guardsquare:dexguard-gradle-plugin:${versions.dexguard.plugin}"
        }
    }
}

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

allprojects {
    ext.newrelic = rootProject.newrelic
}

wrapper {
    gradleVersion = versions.gradle
}

/**
 * Android app component
 * Keep app in rootDir for testing
 */

android {

    namespace "com.newrelic.agent.android.testapp"


    if (findProject(":feature")) {
        dynamicFeatures = [':feature']
    }
}

apply from: "android.gradle"

if (project.includeLibrary && Boolean.valueOf(project.includeLibrary)) {
    dependencies {
        // Dependency on local test library module
        implementation project(':library')
    }
}

project.tasks.register("cleanRoot", Delete) {
    delete rootProject.buildDir
    clean.finalizedBy(it)
}


