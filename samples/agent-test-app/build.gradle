import org.gradle.util.GradleVersion

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: "$projectDir/buildconfig.gradle"

    logger.quiet "[newrelic] [agent-test-app] Agent plugin version [${newrelic.agent.version}]"

    repositories {
        if (project.agentRepo) {
            if (project.agentRepo.toLowerCase().equals("local")) {
                mavenLocal()
            } else if (project.file(agentRepo).exists()) {
                logger.quiet "[newrelic] [agent-test-app] Agent using local [${agentRepo}] repo"
                maven { url "${agentRepo}" }
            }
        }

        // may be injected by CI
        if (System.env.M2_REPO) {
            if (project.file(System.env.M2_REPO).exists()) {
                logger.quiet "[newrelic] [agent-test-app] Agent using local Maven [${System.env.M2_REPO}] repo"
                maven { url "${System.env.M2_REPO}" }
            }
        }

        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:' + versions.agp.plugin
        classpath newrelic.deps.plugin
        if (project.compiler.startsWith('dexguard')) {
            classpath "com.guardsquare:dexguard-gradle-plugin:${versions.dexguard.plugin}"
        }
    }
}

repositories {
    if (project.agentRepo) {
        if (project.agentRepo.toLowerCase().equals("local")) {
            mavenLocal()
        } else if (project.file(agentRepo).exists()) {
            maven { url "${agentRepo}" }
        }
    }

    if (System.env.M2_REPO) {
        if (project.file(System.env.M2_REPO).exists()) {
            maven { url "${System.env.M2_REPO}" }
        }
    }

    mavenCentral()
    google()
}

logger.quiet "[newrelic] [agent-test-app] AGP plugin version [${versions.agp.plugin}]"
logger.quiet "[newrelic] [agent-test-app] withProductFlavors[${project.withProductFlavors.toBoolean()}]"
logger.quiet "[newrelic] [agent-test-app] using dex compiler[$project.compiler]"


apply plugin: 'com.android.application'

def useDexguard = (project.compiler && project.compiler.startsWith('dexguard'))
if (useDexguard) {
    logger.quiet "[newrelic] [agent-test-app] Dexguard license[${System.getProperty('dexguard.license', System.getenv('DEXGUARD_LICENSE'))}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard home[${versions.dexguard.home}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard base version[${versions.dexguard.base}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard plugin version[${versions.dexguard.plugin}]"
    apply plugin: 'dexguard'
}

apply plugin: 'newrelic'

android {
    compileSdkVersion versions.agp.compileSdk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk
        applicationId "com.newrelic"
        versionCode 1
        versionName "1.1"
    }

    logger.quiet "[newrelic] [agent-test-app] minifyEnabled [${project.minify.toBoolean()}]"
    buildTypes {
        switch (compiler) {
            case 'dexguard':
                debug {
                    minifyEnabled false
                }
                qa {
                    minifyEnabled false
                }
                release {
                    minifyEnabled false
                }
                break

            case 'dexguardLegacy':
                debug {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false
                }
                qa {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false
                }
                release {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false // minify.toBoolean()
                }
                break

            case 'r8':
            case 'proguard':
                debug {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    minifyEnabled minify.toBoolean()
                }
                qa {
                    minifyEnabled minify.toBoolean()
                }
                release {
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    minifyEnabled minify.toBoolean()
                }
                break
        }
    }

    if (withProductFlavors.toBoolean()) {
        flavorDimensions "aosp"
        productFlavors {
            google {
                dimension "aosp"
            }
            amazon {
                dimension "aosp"
            }
        }
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:" + versions.agp.supportLib
    implementation newrelic.deps.agent
}

//
// DG 9.+
//
if (project.plugins.hasPlugin("dexguard")) {
    logger.quiet "[newrelic] [agent-test-app] using DexGuard[${versions.dexguard.base}]"

    if (compiler == 'dexguard') {
        dexguard {
            version = versions.dexguard.base

            // Not needed when used with 'version' property:
            // path = /path/to/dexguard/lib

            // Can be set via a system property by adding the following in the gradle.properties file:
            //  systemProp.dexguard.license=/path/to/dexguard-license.txt
            // license = /path/to/dexguard-license.txt"

            configurations {
                debug {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-project.txt'
                    configuration 'proguard-project.txt'
                }
                qa {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-qa-project.txt'
                }
                release {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-project.txt'
                    configuration 'proguard-project.txt'
                }
            }
        }
    }
}

//
// NewRelic agent
//

if (project.plugins.hasPlugin("newrelic")) {

    newrelic {
        // use a common buildId for all variants (default: true)
        // variantMapsEnabled true

        // Tag and report Proguard maps for these build types (default: release):
        uploadMapsForVariant 'release', 'qa'

        // do not instrument these variant builds
        // excludeVariantInstrumentation 'qa'

        // do not instrument these specific packages
        excludePackageInstrumentation 'com.newrelic'

        if (GradleVersion.version(newrelic.agent.version).version >= GradleVersion.version("6.6.0").version) {
            variantConfigurations {
                debug {
                    // mappingFile = 'build/outputs/dexguard/mapping/debug/debug-mapping.txt'
                }

                qa {
                    mappingFile = 'build/outputs/dexguard/mapping/qa/qa-mapping.txt'
                }

                release {
                    // mappingFile = 'build/outputs/dexguard/mapping/bundle/release/mapping.txt'
                }
            }
        }
    }
}
