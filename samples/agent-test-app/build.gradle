/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import org.gradle.util.GradleVersion

buildscript {
    apply from: "$projectDir/buildconfig.gradle"

    logger.quiet "[newrelic] [agent-test-app] Agent plugin version [${newrelic.agent.version}]"

    repositories {
        maven { url newrelic.agent.snapshotUri }

        if (project.agentRepo) {
            if (project.agentRepo.toLowerCase() == "local") {
                mavenLocal()
            } else if (project.file(agentRepo).exists()) {
                logger.quiet "[newrelic] [agent-test-app] Agent using local [${agentRepo}] repo"
                maven { url "${agentRepo}" }
            }
        }

        mavenCentral()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${versions.agp.plugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath newrelic.deps.plugin
        if (project.compiler.startsWith('dexguard')) {
            classpath "com.guardsquare:dexguard-gradle-plugin:${versions.dexguard.plugin}"
        }
    }
}

allprojects {
    repositories {
        if (project.agentRepo) {
            if (project.agentRepo.toLowerCase() == "local") {
                mavenLocal()
            } else if (project.file(agentRepo).exists()) {
                maven { url "${agentRepo}" }
            }
        }

        maven { url newrelic.agent.snapshotUri }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        google()
    }
}

subprojects {
    buildscript {
        repositories {
            if (project.agentRepo) {
                if (project.agentRepo.toLowerCase() == "local") {
                    mavenLocal()
                } else if (project.file(agentRepo).exists()) {
                    logger.quiet "[newrelic] [agent-test-app] Agent using local [${agentRepo}] repo"
                    maven { url "${agentRepo}" }
                }
            }

            maven { url newrelic.agent.snapshotUri }
            maven { url "https://plugins.gradle.org/m2/" }
            mavenCentral()
            google()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:' + versions.agp.plugin
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        }
    }
}


logger.quiet "[newrelic] [agent-test-app] JDK version [${System.getProperty('java.version')}]"
logger.quiet "[newrelic] [agent-test-app] Gradle version [${GradleVersion.current()}]"
logger.quiet "[newrelic] [agent-test-app] AGP plugin version [${versions.agp.plugin}]"
logger.quiet "[newrelic] [agent-test-app] withProductFlavors[${project.withProductFlavors.toBoolean()}]"
logger.quiet "[newrelic] [agent-test-app] using dex compiler[$project.compiler]"
logger.quiet "[newrelic] [agent-test-app] appy NR plugins[$project.applyPlugin]"

if (project.compiler && project.compiler.startsWith('dexguard')) {
    logger.quiet "[newrelic] [agent-test-app] Dexguard license[${System.getProperty('dexguard.license', System.getenv('DEXGUARD_LICENSE'))}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard home[${versions.dexguard.home}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard base version[${versions.dexguard.base}]"
    logger.quiet "[newrelic] [agent-test-app] Dexguard plugin version[${versions.dexguard.plugin}]"
    apply plugin: 'dexguard'
}

project.tasks.register("cleanRoot", Delete) {
    delete rootProject.buildDir
}


/**
 * Android app component
 * Keep app in rootDir for testing
 */
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply from: "android.gradle"

android {
    namespace "com.newrelic.agent.android.testapp"

    defaultConfig {
        applicationId "com.newrelic"
    }

    if (findProject(":feature")) {
        dynamicFeatures = [':feature']
    }
}
