import org.slf4j.LoggerFactory

/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
def logger = LoggerFactory.getLogger("newrelic")


android {
    compileSdk versions.agp.compileSdk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk
        versionCode 1
        versionName "1.1"
    }

    logger.quiet "[agent-test-app] minifyEnabled [${project.minifyEnabled.toBoolean()}]"
    logger.quiet "[agent-test-app] withProductFlavors[${project.withProductFlavors.toBoolean()}]"
    logger.quiet "[agent-test-app] using dex compiler[$project.compiler]"

    buildTypes {
        switch (compiler) {
            case 'dexguard':
                debug {
                    minifyEnabled false
                }
                qa {
                    minifyEnabled false
                }
                release {
                    minifyEnabled false
                }
                break

            case 'r8':
            case 'proguard':
                debug {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                qa {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                release {
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                break

            default:
                debug {}
                qa {}
                release {}
                break
        }
    }

    if (withProductFlavors && withProductFlavors.toBoolean()) {
        flavorDimensions "aosp"
        productFlavors {
            google {
                dimension "aosp"
            }
            amazon {
                dimension "aosp"
            }
        }
    }

}

dependencies {
    implementation newrelic.deps.agent
    implementation newrelic.deps.ndk

    implementation "com.android.support:appcompat-v7:${versions.agp.supportLib}"
    implementation "com.google.code.gson:gson:${versions.gson}"
}

//
// DG 9.+
//
if (project.compiler && project.compiler.startsWith('dexguard')) {
    apply from: "dexguard.gradle"
}

//
// NewRelic agent
//
if (project.applyPlugin && Boolean.valueOf(project.applyPlugin)) {
    apply plugin: 'newrelic'

    logger.quiet "[agent-test-app] applied NR [${newrelic.agent.version}] plugin"

    // this allows integration testing
    def testExtension = rootProject.file("nr-extension.gradle")
    if (testExtension.exists()) {
        apply from: testExtension.absolutePath

    } else {
        newrelic {
            // use a common buildId for all variants (default: true)
            variantMapsEnabled = true

            // Tag and report Proguard maps for these build types (default: release):
            if (withProductFlavors && withProductFlavors.toBoolean()) {
                uploadMapsForVariant 'googleRelease', 'amazonQa'
            } else {
                uploadMapsForVariant 'release', 'qa'
            }

            // do not instrument these variant builds
            excludeVariantInstrumentation 'debug'

            // do not instrument these specific packages
            excludePackageInstrumentation 'com.newrelic'

            try {
                variantConfigurations {
                    debug {
                        mappingFile = "build/outputs/mapping/qa/mapping.txt"
                    }

                    qa {
                        uploadMappingFile = true
                        mappingFile = "build/outputs/mapping/qa/mapping.txt"
                    }

                    release {
                        uploadMappingFile = true
                        mappingFile = "build/outputs/mapping/release/mapping.txt"
                    }
                }
            } catch (Exception e) {
                logger.error(e.toString())
            }
        }
    }
}
