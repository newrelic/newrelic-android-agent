/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

android {
    compileSdkVersion versions.agp.compileSdk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk
        versionCode 1
        versionName "1.1"
    }

    logger.quiet "[newrelic] [agent-test-app] minifyEnabled [${project.minify.toBoolean()}]"
    buildTypes {
        switch (compiler) {
            case 'dexguard':
                debug {
                    minifyEnabled false
                }
                qa {
                    minifyEnabled false
                }
                release {
                    minifyEnabled false
                }
                break

            case 'dexguardLegacy':
                debug {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false
                }
                qa {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false
                }
                release {
                    proguardFile getDefaultDexGuardFile('dexguard-release.pro')
                    minifyEnabled false
                }
                break

            case 'r8':
            case 'proguard':
                debug {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    minifyEnabled minify.toBoolean()
                }
                qa {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    minifyEnabled minify.toBoolean()
                }
                release {
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    minifyEnabled minify.toBoolean()
                }
                break

            default:
                debug {}
                qa {}
                release {}
                break
        }
    }

    if (withProductFlavors && withProductFlavors.toBoolean()) {
        flavorDimensions "aosp"
        productFlavors {
            google {
                dimension "aosp"
            }
            amazon {
                dimension "aosp"
            }
        }
    }

}

dependencies {
    implementation newrelic.deps.agent
    implementation newrelic.deps.ndk

    implementation "com.android.support:appcompat-v7:${versions.agp.supportLib}"
    implementation "com.google.code.gson:gson:${versions.gson}"
}

//
// DG 9.+
//
if (project.plugins.hasPlugin("dexguard")) {
    if (compiler == 'dexguard') {
        logger.quiet "[newrelic] [agent-test-app] using DexGuard[${versions.dexguard.base}]"
        dexguard {
            version = versions.dexguard.base

            // Not needed when used with 'version' property:
            // path = /path/to/dexguard/lib

            // Can be set via a system property by adding the following in the gradle.properties file:
            //  systemProp.dexguard.license=/path/to/dexguard-license.txt
            // license = /path/to/dexguard-license.txt"

            configurations {
                debug {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-project.txt'
                    configuration 'proguard-rules.pro'
                }
                qa {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-qa-project.txt'
                }
                release {
                    defaultConfiguration 'dexguard-release.pro'
                    configuration 'dexguard-project.txt'
                    configuration 'proguard-rules.pro'
                }
            }
        }
    }
}

//
// NewRelic agent
//

if (project.applyPlugin && Boolean.valueOf(project.applyPlugin)) {
    apply plugin: 'newrelic'
    logger.quiet "[newrelic] [agent-test-app] applied NR Plugin"
}

if (project.plugins.hasPlugin("newrelic")) {

    // this allows integration testing
    def testExtension = rootProject.file("nr-extension.gradle")
    if (testExtension.exists()) {
        apply from: testExtension.absolutePath

    } else {
        newrelic {
            // use a common buildId for all variants (default: true)
            // variantMapsEnabled true

            // Tag and report Proguard maps for these build types (default: release):
            if (withProductFlavors && withProductFlavors.toBoolean()) {
                uploadMapsForVariant 'googleRelease', 'amazonQa'
            } else {
                uploadMapsForVariant 'release', 'qa'
            }

            // do not instrument these variant builds
            excludeVariantInstrumentation 'debug'

            // do not instrument these specific packages
            excludePackageInstrumentation 'com.newrelic'

            try {
                variantConfigurations {
                    debug {
                        // mappingFile = 'build/outputs/dexguard/mapping/debug/debug-mapping.txt'
                    }

                    qa {
                        mappingFile = 'build/outputs/dexguard/mapping/qa/qa-mapping.txt'
                    }

                    release {
                        // mappingFile = 'build/outputs/dexguard/mapping/bundle/release/mapping.txt'
                    }
                }
            } catch (Exception) {
                logger.info("DSL not implemented")
            }
        }
    }
}
