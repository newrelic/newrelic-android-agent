/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import org.slf4j.LoggerFactory

def logger = LoggerFactory.getLogger("newrelic")

android {
    compileSdk versions.agp.compileSdk

    defaultConfig {
        minSdkVersion versions.agp.minSdk
        targetSdkVersion versions.agp.targetSdk
        versionCode 1
        versionName "1.1"
    }

    logger.quiet "[agent-test-app] minifyEnabled [${project.minifyEnabled.toBoolean()}]"
    logger.quiet "[agent-test-app] withProductFlavors[${project.withProductFlavors.toBoolean()}]"
    logger.quiet "[agent-test-app] using dex compiler[$project.compiler]"

    buildTypes {
        switch (compiler) {
            case 'dexguard':
                debug {
                    minifyEnabled false
                    debuggable true
                }
                qa {
                    minifyEnabled false
                    debuggable true
                }
                release {
                    minifyEnabled false
                    debuggable true
                }
                break

            case 'r8':
            case 'proguard':
                debug {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                qa {
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                release {
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "${rootDir}/proguard-rules.pro"
                    minifyEnabled project.minifyEnabled.toBoolean()
                }
                break

            default:
                debug {}
                qa.initWith debug
                release.initWith qa
                break
        }
    }

    if (withProductFlavors && withProductFlavors.toBoolean()) {
        flavorDimensions "aosp"
        productFlavors {
            google {
                dimension "aosp"
            }
            amazon {
                dimension "aosp"
            }
        }
    }

}

dependencies {
    implementation newrelic.deps.agent
    implementation newrelic.deps.ndk

    implementation "com.android.support:appcompat-v7:${versions.agp.supportLib}"
    implementation "com.google.code.gson:gson:${versions.gson}"

    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "org.bouncycastle:bcprov-jdk18on:${versions.bcprov}"
}

//
// DG 9.+
//
if (project.compiler && project.compiler.startsWith('dexguard')) {
    apply from: "dexguard.gradle"
}

//
// NewRelic agent
//
if (project.applyPlugin && Boolean.valueOf(project.applyPlugin)) {
    apply plugin: 'newrelic'

    logger.quiet "[agent-test-app] applied NR [${newrelic.agent.version}] plugin"

    // this allows integration tests to configure plugin
    def testExtension = rootProject.file("nr-extension.gradle")
    if (testExtension.exists()) {
        apply from: testExtension.absolutePath

    } else {
        newrelic {

            // true by by default
            logInstrumentationEnabled = true

            // use a common buildId for all variants (default: true)
            variantMapsEnabled = true

            // Tag and report Proguard/DexGuard maps for these build types:
            if (withProductFlavors && withProductFlavors.toBoolean()) {
                uploadMapsForVariant 'googleQa', 'amazonQa'
            } else {
                uploadMapsForVariant 'qa'
            }

            // do not instrument these variant builds
            excludeVariantInstrumentation 'debug'

            // do not instrument these specific packages
            excludePackageInstrumentation 'com.testapp', 'org.bouncycastle.crypto'

            try {
                // allow overrides for specific (DexGuard) configuration
                variantConfigurations {
                    qa {
                        uploadMappingFile = true
                        mappingFile = "build/outputs/dexguard/mapping/qa/qa-mapping.txt"
                    }
                }

            } catch (Exception e) {
                logger.error(e.toString())
            }
        }
    }
}
