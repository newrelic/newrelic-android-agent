/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import com.android.builder.core.BuilderConstants
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("com.github.johnrengelman.shadow")
    id("com.android.library")
}

apply from: "$project.rootDir/jacoco.gradle"

version = project.versions.agent
archivesBaseName = "android-agent"

tasks.withType(JavaExec).configureEach {
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
        jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED",
                 "--add-opens=java.base/java.util=ALL-UNNAMED"])
    }
}

android {
    namespace "com.newrelic.agent.android"
    compileSdkVersion project.versions.agp.compileSdk

    defaultConfig {
        minSdkVersion project.versions.agp.minSdk
        targetSdkVersion project.versions.agp.targetSdk
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    // only interested in the release variant
    variantFilter { variant ->
        if (variant.buildType.name != BuilderConstants.RELEASE) {
            variant.ignore = true
        }
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage', 'GradleDynamicVersion'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                forkEvery = 1
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
        }
    }

    libraryVariants.all { variant ->
        logger.info("[FAT-JAR] Variant[${variant.name}]")
        variant.ext.fatJarProvider = toFatJarTask(variant)
        artifacts {
            // The artifact is a fat jar
            archives variant.ext.fatJarProvider
        }

        def assembleTask = variant.getAssembleProvider()
        fatJarProvider.configure {
            dependsOn assembleTask
        }
        assembleTask.configure {
            finalizedBy variant.ext.fatJarProvider
        }
    }
}

dependencies {
    implementation project(path: ':agent-core', configuration: 'fat')

    compileOnly fileTree(dir: 'libs', include: '*.jar')
    compileOnly newrelic.deps.ndk

    compileOnly "androidx.navigation:navigation-compose:${project.versions.jetpack}"

    testImplementation project(path: ':agent-core', configuration: 'fat')
    testImplementation fileTree(dir: 'libs', include: '*.jar')
    testImplementation newrelic.deps.ndk

    testImplementation 'org.robolectric:robolectric:' + project.versions.test.robolectric
    testImplementation 'junit:junit:' + project.versions.test.junit
    testImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    testImplementation 'androidx.test:core:' + project.versions.test.androidxCore
}

/**
 * Finalize android-agent.jar for the passed variant
 */

def toFatJarTask(def variant) {
    def unshadedJarProvider = project.tasks.register("unshadedJar${variant.name.capitalize()}", Jar) {
        dependsOn variant.runtimeConfiguration
        dependsOn variant.getJavaCompileProvider()
        archiveClassifier = "u"
        include("**/GsonInstrumentation*")
        from variant.getJavaCompileProvider().get().destinationDir
        from {
            variant.runtimeConfiguration.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    def shadedJarProvider = project.tasks.register("shadedJar${variant.name.capitalize()}", ShadowJar) {
        dependsOn variant.runtimeConfiguration
        dependsOn variant.getJavaCompileProvider()
        archiveClassifier = "s"
        from variant.getJavaCompileProvider().get().destinationDir
        from {
            variant.runtimeConfiguration.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude '**/META-INF/**'
        exclude(unshadedJarProvider.get().includes)
        relocate("com.google.gson", "com.newrelic.com.google.gson") {
            // FIXME: Shadow does not exclude! This breaks Gson instrumentation.
            //  It's why we have to merge an unshaded and shaded jar below
            exclude("com.newrelic.agent.android.instrumentation.GsonInstrumentation")
        }
        relocate("com.google.flatbuffers", "com.newrelic.com.google.flatbuffers")
        mergeServiceFiles()
    }

    def fatJarProvider = project.tasks.register("fatJar${variant.name.capitalize()}", Jar) {
        dependsOn unshadedJarProvider
        dependsOn shadedJarProvider
        archiveClassifier = ""
        includeEmptyDirs = false
        manifest {
            attributes(
                    "Implementation-Vendor": "New Relic Inc.",
                    "Implementation-Title": "Android Agent",
                    "Implementation-Version": project.version,
                    "Built-Date": project.buildDate,
            )
            metaInf {
                from variant.mergedFlavor.consumerProguardFiles
                into "proguard"
            }
        }
        exclude '**/META-INF/**'
        exclude '**/module-info.class'
        duplicatesStrategy = DuplicatesStrategy.INHERIT
        from unshadedJarProvider.get().outputs.files.collect { it.isDirectory() ? it : zipTree(it) }
        from shadedJarProvider.get().outputs.files.collect { it.isDirectory() ? it : zipTree(it) }
    }

    fatJarProvider
}

/**
 * Configure artifact publishing
 */
apply from: "${rootDir}/gradle/publishing.gradle"

publishing {

        publications {
            mavenJava(MavenPublication) {
                android.libraryVariants.all { variant ->
                    artifact variant.ext.fatJarProvider
                }
                artifactId 'android-agent'
                pom {
                    groupId = 'com.newrelic.agent.android'
                    artifactId = monoEnabled ? 'android-agent-static':'android-agent'
                    version = rootProject.version
                    name = 'New Relic Android Agent'
                    description = 'The New Relic Android agent provides performance monitoring instrumentation for Android applications'
                }
            }
        }
    }
