/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id("com.github.johnrengelman.shadow")
    id("java")
}

version = project.versions.agent
archivesBaseName = "agent-core"

def buildGenPath = "${buildDir}/tmp/compileJava/src/main/java"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    fat {
        extendsFrom project.configurations.runtimeClasspath
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "NewRelic Agent-Core",
                "Implementation-Version": project.newrelic.agent.version,
                "Built-Date": project.buildDate,
                "Specification-Version": project.versions.agent)
    }
}

//
// Class rewriting (package relocation)
//

shadowJar {
    archiveClassifier = 'fat'
     relocate 'com.google.flatbuffers', 'com.newrelic.com.google.flatbuffers'
    // relocate 'com.google.gson', 'com.newrelic.com.google.gson'
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    mergeServiceFiles()
}

dependencies {
    implementation fileTree(dir: 'libs/export', include: '*.jar')
    compileOnly fileTree(dir: 'libs', include: '*.jar')

    testImplementation fileTree(dir: 'libs', include: '*.jar')
    testImplementation fileTree(dir: 'libs/export', include: '*.jar')
    testImplementation 'junit:junit:' + project.versions.test.junit
    testImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
}

artifacts {
    'fat' shadowJar
}

test {
    forkEvery = 1
}

tasks.register('stampAgentClass', Copy) {
    logger.lifecycle "[newrelic] [agent-core] Version[${version}]"
    logger.quiet "[newrelic] [agent-core] MonoEnabled[${monoEnabled}]"

    def buildId = ""
    if (monoEnabled) {
        def stdout = new ByteArrayOutputStream()
        exec() {
            executable = "uuidgen"
            standardOutput = stdout
        }
        buildId = stdout.toString().trim()
        logger.quiet "[newrelic] [agent-core] BuildId[${buildId}]"
    }

    from("src/main/java/com/newrelic/agent/android/Agent.java") {
        filter { it.replaceAll('#VERSION#', version) }
        filter { it.replaceAll('#MONO_INSTRUMENTATION_FLAG#', monoEnabled ? "YES" : "NO") }
        filter { it.replaceAll('#DEFAULT_BUILD_ID#', buildId) }
    }
    into "${buildGenPath}/com/newrelic/agent/android"
}

/**
 * Compile the stamped source file created above
 */
tasks.register('compileStampedAgent', JavaCompile) {
    dependsOn 'stampAgentClass'
    source = buildGenPath
    include 'com/newrelic/agent/android/Agent.java'
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = sourceSets.main.output.classesDirs.first()

    options.sourcepath = sourceSets.main.allJava.getSourceDirectories()
    options.listFiles = false
}

/**
 * Set dependencies
 */
project.afterEvaluate() {
    tasks.named("compileTestJava").configure {
        dependsOn("compileStampedAgent")
    }

    tasks.withType(Jar).configureEach {
        dependsOn("compileStampedAgent")
    }

    classes.finalizedBy compileStampedAgent, shadowJar
}