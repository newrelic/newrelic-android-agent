// automatically generated by the FlatBuffers compiler, do not modify

package com.newrelic.mobile.fbs.jserror;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Frame extends Table {
  public static Frame getRootAsFrame(ByteBuffer _bb) { return getRootAsFrame(_bb, new Frame()); }
  public static Frame getRootAsFrame(ByteBuffer _bb, Frame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String method() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer methodAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer methodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String fileName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fileNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int lineNumber() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateLineNumber(int lineNumber) { int o = __offset(8); if (o != 0) { bb.putInt(o + bb_pos, lineNumber); return true; } else { return false; } }
  public int column() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateColumn(int column) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, column); return true; } else { return false; } }

  public static int createFrame(FlatBufferBuilder builder,
      int methodOffset,
      int fileNameOffset,
      int lineNumber,
      int column) {
    builder.startObject(4);
    Frame.addColumn(builder, column);
    Frame.addLineNumber(builder, lineNumber);
    Frame.addFileName(builder, fileNameOffset);
    Frame.addMethod(builder, methodOffset);
    return Frame.endFrame(builder);
  }

  public static void startFrame(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addMethod(FlatBufferBuilder builder, int methodOffset) { builder.addOffset(0, methodOffset, 0); }
  public static void addFileName(FlatBufferBuilder builder, int fileNameOffset) { builder.addOffset(1, fileNameOffset, 0); }
  public static void addLineNumber(FlatBufferBuilder builder, int lineNumber) { builder.addInt(2, lineNumber, 0); }
  public static void addColumn(FlatBufferBuilder builder, int column) { builder.addInt(3, column, 0); }
  public static int endFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

