// automatically generated by the FlatBuffers compiler, do not modify

package com.newrelic.mobile.fbs.hex;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Frame extends Table {
  public static Frame getRootAsFrame(ByteBuffer _bb) { return getRootAsFrame(_bb, new Frame()); }
  public static Frame getRootAsFrame(ByteBuffer _bb, Frame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String value() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String className() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String methodName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer methodNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer methodNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String fileName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer fileNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public long lineNumber() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateLineNumber(long lineNumber) { int o = __offset(12); if (o != 0) { bb.putLong(o + bb_pos, lineNumber); return true; } else { return false; } }
  public long address() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateAddress(long address) { int o = __offset(14); if (o != 0) { bb.putLong(o + bb_pos, address); return true; } else { return false; } }

  public static int createFrame(FlatBufferBuilder builder,
      int valueOffset,
      int classNameOffset,
      int methodNameOffset,
      int fileNameOffset,
      long lineNumber,
      long address) {
    builder.startObject(6);
    Frame.addAddress(builder, address);
    Frame.addLineNumber(builder, lineNumber);
    Frame.addFileName(builder, fileNameOffset);
    Frame.addMethodName(builder, methodNameOffset);
    Frame.addClassName(builder, classNameOffset);
    Frame.addValue(builder, valueOffset);
    return Frame.endFrame(builder);
  }

  public static void startFrame(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(0, valueOffset, 0); }
  public static void addClassName(FlatBufferBuilder builder, int classNameOffset) { builder.addOffset(1, classNameOffset, 0); }
  public static void addMethodName(FlatBufferBuilder builder, int methodNameOffset) { builder.addOffset(2, methodNameOffset, 0); }
  public static void addFileName(FlatBufferBuilder builder, int fileNameOffset) { builder.addOffset(3, fileNameOffset, 0); }
  public static void addLineNumber(FlatBufferBuilder builder, long lineNumber) { builder.addLong(4, lineNumber, 0L); }
  public static void addAddress(FlatBufferBuilder builder, long address) { builder.addLong(5, address, 0L); }
  public static int endFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

