/*
 * Copyright (c) 2022 - present. New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id("groovy")
    id("org.jetbrains.kotlin.jvm")
}

import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal


group = 'com.newrelic.agent.android'
version = project.versions.agent

sourceSets {
    main {
        java.srcDirs += "src/main/kotlin"
    }

    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    functional {
        groovy.srcDir "$projectDir/src/functional/groovy"
        resources.srcDir "$projectDir/src/functional/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime

    functionalImplementation.extendsFrom testImplementation
    functionalRuntime.extendsFrom testRuntime
}

compileGroovy {
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDir)
}

compileKotlin {
    classpath += files(compileGroovy.destinationDir)
}

classes.dependsOn compileKotlin

dependencies {
    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
            .getModule("gradle-tooling-api-builders")
            .classpath
            .asFiles
            .first()

    implementation project(path: ':instrumentation', configuration: 'shadow')
    implementation files("${System.getProperty('java.home')}/../lib/tools.jar")

    compileOnly 'com.android.tools.build:gradle:' + project.versions.agp.plugin
    compileOnly 'com.android.tools.build:gradle-api:' + project.versions.agp.gradleApi
    compileOnly gradleApi()

    implementation 'commons-io:commons-io:' + project.versions.java.commonsIO
    implementation 'com.guardsquare:proguard-gradle:' + project.versions.java.proguard
    implementation 'org.ow2.asm:asm:' + project.versions.java.asm
    implementation 'org.ow2.asm:asm-util:' + project.versions.java.asm

    compileOnly localGroovy()
    compileOnly 'com.google.guava:guava:' + project.versions.java.guava

    // testImplementation(project)
    testImplementation project(path: ':instrumentation', configuration: 'default')
    testImplementation gradleApi()
    testImplementation gradleTestKit()
    testImplementation 'com.android.tools.build:gradle:' + project.versions.agp.plugin
    testImplementation 'com.android.tools.build:gradle-api:' + project.versions.agp.gradleApi
    testImplementation 'commons-io:commons-io:' + project.versions.java.commonsIO
    testImplementation 'com.google.guava:guava:' + project.versions.java.guava
    testImplementation 'junit:junit:' + project.versions.test.junit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + project.versions.test.jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:' + project.versions.test.jupiter
    testImplementation 'org.junit.vintage:junit-vintage-engine:' + project.versions.test.jupiter
    testImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }

    // integrations
    integrationImplementation(project)
    integrationImplementation project(path: ':instrumentation', configuration: 'default')
    integrationImplementation gradleApi()
    integrationImplementation gradleTestKit()
    integrationImplementation 'com.android.tools.build:gradle:' + project.versions.agp.plugin
    integrationImplementation 'com.android.tools.build:gradle-api:' + project.versions.agp.gradleApi
    integrationImplementation 'commons-io:commons-io:' + project.versions.java.commonsIO
    integrationImplementation 'com.google.guava:guava:' + project.versions.java.guava
    integrationImplementation 'org.junit.jupiter:junit-jupiter:' + project.versions.test.jupiter
    integrationImplementation 'org.junit.vintage:junit-vintage-engine:' + project.versions.test.jupiter
    integrationImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    integrationImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
    integrationImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }

    // end-to-end, regressions
    functionalImplementation(project)
    functionalImplementation project(path: ':instrumentation', configuration: 'default')
    functionalImplementation gradleApi()
    functionalImplementation gradleTestKit()
    functionalImplementation 'com.android.tools.build:gradle:' + project.versions.agp.plugin
    functionalImplementation 'com.android.tools.build:gradle-api:' + project.versions.agp.gradleApi
    functionalImplementation 'commons-io:commons-io:' + project.versions.java.commonsIO
    functionalImplementation 'com.google.guava:guava:' + project.versions.java.guava
    functionalImplementation 'org.junit.jupiter:junit-jupiter-api:' + project.versions.test.jupiter
    functionalImplementation 'org.junit.jupiter:junit-jupiter:' + project.versions.test.jupiter
    functionalImplementation 'org.junit.vintage:junit-vintage-engine:' + project.versions.test.jupiter
    functionalImplementation 'org.mockito:mockito-core:' + project.versions.test.mockitoCore
    functionalImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
    functionalImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }

    testRuntimeOnly(files(toolingApiBuildersJar))
}

tasks.withType(JavaCompile).configureEach {
    dependsOn(":instrumentation:jar")
}

tasks.named("compileKotlin").configure {
    dependsOn(":instrumentation:jar")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    failFast = true

    ["newrelic.agent.args", "newrelic.agent.version", "integrations", "regressions"].each {
        if (project.hasProperty(it)) {
            systemProperty it, project.property(it)
        }
    }

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
        jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED",
                 "--add-opens=java.base/java.util=ALL-UNNAMED"])
    }
}

tasks.withType(Copy).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
    minHeapSize = "2g"
    maxHeapSize = "8g"
    failFast = true
}

def integrationTestTask = tasks.register("integrationTests", Test) {
    description = 'Runs the integration test suite'
    group = "test"
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    mustRunAfter(tasks.named('test'))
}

def functionalTestTask = tasks.register("functionalTests", Test) {
    description = 'Runs the functional/regression test suite'
    group = "test"
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath
    mustRunAfter(tasks.named('test'))
}

tasks.named('check') {
    // dependsOn(tasks.named("integrationTests"))
    // dependsOn(tasks.named("functionalTests"))
}

artifacts {
    archives jar
}

apply from: "${rootDir}/gradle/publishing.gradle"

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'agent-gradle-plugin'
            pom {
                artifactId = 'agent-gradle-plugin'
                name = 'New Relic Android Gradle Plugin'
                description = 'The New Relic Android Gradle plugin instruments classes for Android applications'
            }
        }
    }
}
